from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.models import Product


CATEGORY_MENU_NAME_DICT = {
    "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∏": "ceramic",
    "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å": "vr",
    "–ê—Ä—Ç –≥–∞–ª–µ—Ä–µ—è": "art_galery",
    "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": "events"
}


def get_callback_btns(
    *,
    btns: dict[str, str],
    sizes: tuple[int] = (2,)
) -> InlineKeyboardBuilder:

    keyboard = InlineKeyboardBuilder()

    for text, data in btns.items():

        keyboard.add(InlineKeyboardButton(text=text, callback_data=data))

    return keyboard.adjust(*sizes).as_markup()


class MenuCallBack(CallbackData, prefix="menu"):
    menu_name: str


class ProductCallBack(CallbackData, prefix="product"):
    category: str
    pr_type: str = "PRODUCT"
    product_id: int | None = None
    author_id: int | None = None
    page: int = 1


class EventCallBack(CallbackData, prefix="event"):
    category: str
    event_id: int | None = None


###################### –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã #########################
def get_user_main_btns(*, sizes: tuple[int] = (1,)):
    keyboard = InlineKeyboardBuilder()
    btns = {
        "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ß–∏—Ä–∫–æ–≤—ä": "events",
        "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∏ 4 —á—Ç–∏—Ö–∏–∏ üè∫": "ceramic",
        "VR club 1663": "vr",
        "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è": "art_galery",
    }
    for text, menu_name in btns.items():
        if menu_name == "events":
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(menu_name=menu_name).pack()))
        elif menu_name == "ceramic":
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(menu_name=menu_name).pack()))
        elif menu_name == "vr":
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(menu_name=menu_name).pack()))
        elif menu_name == "art_galery":
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=MenuCallBack(menu_name=menu_name).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_ceramic_btns(*, sizes: tuple[int] = (1, )):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text="–ó–∞–ø–∏—Å—å",
            callback_data=ProductCallBack(
                category="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∏",
                pr_type="SERVICE"
            ).pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–ò–∑–¥–µ–ª–∏—è –∫–µ—Ä–∞–º–∏–∫–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ",
            callback_data=ProductCallBack(
                category="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∏",
                pr_type="PRODUCT"
            ).pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            callback_data=EventCallBack(
                category="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫–µ—Ä–∞–º–∏–∫–∏",
            ).pack()
        )
    )
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                callback_data=MenuCallBack(menu_name="main").pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_events_btns(*, sizes: tuple[int] = (2,)):
    # –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é, —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏—è!!!!!!!!!!!!!!!!!!
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                callback_data=MenuCallBack(menu_name="main").pack()))
    keyboard.add(InlineKeyboardButton(text="–°–æ–±—ã—Ç–∏—è üõí",
                callback_data=MenuCallBack(menu_name="main").pack()))

    # for c in categories:
    #     keyboard.add(InlineKeyboardButton(text=c.name,
    #             callback_data=MenuCallBack(level=level+1, menu_name=c.name, category=c.id).pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_user_vr_btns(*, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(
            text="–ó–∞–ø–∏—Å—å –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ",
            callback_data=ProductCallBack(
                category="–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
                pr_type="SERVICE"
            ).pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=MenuCallBack(menu_name="main").pack()
        )
    )

    return keyboard.adjust(*sizes).as_markup()


def get_user_art_galery_btns(*, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                callback_data=MenuCallBack(menu_name="main").pack()))
    keyboard.add(InlineKeyboardButton(text="art_galery üõí",
                callback_data=MenuCallBack(menu_name="main").pack()))

    return keyboard.adjust(*sizes).as_markup()


######################## –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ ##################################
def get_user_product_list_btns(
        products: list[Product],
        category: str,
        sizes: tuple[int] = (2,)
    ):

    keyboard = InlineKeyboardBuilder()

    for num, p in enumerate(products, start=1):
        text = f"{num}. {p.name}. –¶–µ–Ω–∞ - {p.price} —Ä—É–±."
        keyboard.add(InlineKeyboardButton(text=text,
                callback_data=ProductCallBack(
                    product_id=str(p.id),
                    pr_type="SERVICE",
                    category=category
                ).pack()))

    keyboard.add(
        InlineKeyboardButton(
            text="–í–µ—Ä—É–Ω—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data=MenuCallBack(
                menu_name=CATEGORY_MENU_NAME_DICT[category]
            ).pack()
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=MenuCallBack(menu_name="main").pack()
            )
        )

    return keyboard.adjust(*sizes).as_markup()


def get_user_product_list_back_btns(category: str, sizes: tuple[int] = (2,)):

    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text="–í–µ—Ä—É–Ω—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                callback_data=MenuCallBack(
                    menu_name=CATEGORY_MENU_NAME_DICT[category]
                ).pack()))
    keyboard.add(InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data=MenuCallBack(menu_name="main").pack()))

    return keyboard.adjust(*sizes).as_markup()


def get_products_btns(
    *,
    page: int,
    category: str,
    pagination_btns: dict,
    sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(
        text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=ProductCallBack(
                    category=category,
                    page=page + 1).pack()))

        elif menu_name == "previous":
            row.append(InlineKeyboardButton(
                text=text,
                callback_data=ProductCallBack(
                    category=category,
                    page=page - 1).pack()))

    return keyboard.row(*row).as_markup()
